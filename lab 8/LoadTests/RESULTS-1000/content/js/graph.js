/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6039.0, "minX": 0.0, "maxY": 46159.0, "series": [{"data": [[0.0, 6039.0], [0.1, 6078.0], [0.2, 6089.0], [0.3, 6089.0], [0.4, 6111.0], [0.5, 6130.0], [0.6, 6293.0], [0.7, 6439.0], [0.8, 6439.0], [0.9, 6458.0], [1.0, 6478.0], [1.1, 6499.0], [1.2, 6502.0], [1.3, 6502.0], [1.4, 6509.0], [1.5, 6511.0], [1.6, 6571.0], [1.7, 6571.0], [1.8, 6575.0], [1.9, 6613.0], [2.0, 6617.0], [2.1, 6626.0], [2.2, 6638.0], [2.3, 6643.0], [2.4, 6644.0], [2.5, 6648.0], [2.6, 6652.0], [2.7, 6658.0], [2.8, 6674.0], [2.9, 6679.0], [3.0, 6691.0], [3.1, 6696.0], [3.2, 6696.0], [3.3, 6707.0], [3.4, 6708.0], [3.5, 6710.0], [3.6, 6711.0], [3.7, 6711.0], [3.8, 6714.0], [3.9, 6715.0], [4.0, 6718.0], [4.1, 6725.0], [4.2, 6725.0], [4.3, 6731.0], [4.4, 6731.0], [4.5, 6731.0], [4.6, 6732.0], [4.7, 6739.0], [4.8, 6745.0], [4.9, 6763.0], [5.0, 6766.0], [5.1, 6775.0], [5.2, 6776.0], [5.3, 6777.0], [5.4, 6783.0], [5.5, 6787.0], [5.6, 6796.0], [5.7, 6799.0], [5.8, 6805.0], [5.9, 6806.0], [6.0, 6811.0], [6.1, 6816.0], [6.2, 6825.0], [6.3, 6835.0], [6.4, 6855.0], [6.5, 6856.0], [6.6, 6873.0], [6.7, 6890.0], [6.8, 6903.0], [6.9, 6917.0], [7.0, 6931.0], [7.1, 6936.0], [7.2, 6943.0], [7.3, 6955.0], [7.4, 6976.0], [7.5, 6977.0], [7.6, 6980.0], [7.7, 6980.0], [7.8, 7019.0], [7.9, 7019.0], [8.0, 7020.0], [8.1, 7022.0], [8.2, 7030.0], [8.3, 7031.0], [8.4, 7038.0], [8.5, 7039.0], [8.6, 7047.0], [8.7, 7047.0], [8.8, 7054.0], [8.9, 7077.0], [9.0, 7087.0], [9.1, 7137.0], [9.2, 7203.0], [9.3, 7241.0], [9.4, 7258.0], [9.5, 7276.0], [9.6, 7277.0], [9.7, 7284.0], [9.8, 7363.0], [9.9, 7365.0], [10.0, 7379.0], [10.1, 7389.0], [10.2, 7498.0], [10.3, 7558.0], [10.4, 7565.0], [10.5, 7599.0], [10.6, 7605.0], [10.7, 7613.0], [10.8, 7695.0], [10.9, 7708.0], [11.0, 7749.0], [11.1, 7769.0], [11.2, 7811.0], [11.3, 7844.0], [11.4, 7850.0], [11.5, 7863.0], [11.6, 7868.0], [11.7, 7935.0], [11.8, 7941.0], [11.9, 7966.0], [12.0, 7988.0], [12.1, 8017.0], [12.2, 8036.0], [12.3, 8059.0], [12.4, 8107.0], [12.5, 10087.0], [12.6, 15268.0], [12.7, 15294.0], [12.8, 15333.0], [12.9, 15367.0], [13.0, 15384.0], [13.1, 15398.0], [13.2, 15453.0], [13.3, 15470.0], [13.4, 15487.0], [13.5, 15521.0], [13.6, 15565.0], [13.7, 15609.0], [13.8, 15736.0], [13.9, 15784.0], [14.0, 15831.0], [14.1, 15841.0], [14.2, 15841.0], [14.3, 15913.0], [14.4, 15930.0], [14.5, 15939.0], [14.6, 15978.0], [14.7, 15992.0], [14.8, 16046.0], [14.9, 16066.0], [15.0, 16099.0], [15.1, 16100.0], [15.2, 16123.0], [15.3, 16134.0], [15.4, 16147.0], [15.5, 16203.0], [15.6, 16266.0], [15.7, 16277.0], [15.8, 16306.0], [15.9, 16348.0], [16.0, 16365.0], [16.1, 16434.0], [16.2, 16510.0], [16.3, 16519.0], [16.4, 16521.0], [16.5, 16536.0], [16.6, 16546.0], [16.7, 16569.0], [16.8, 16573.0], [16.9, 16660.0], [17.0, 16704.0], [17.1, 16738.0], [17.2, 16742.0], [17.3, 16742.0], [17.4, 16794.0], [17.5, 16798.0], [17.6, 16800.0], [17.7, 16808.0], [17.8, 16825.0], [17.9, 16829.0], [18.0, 16841.0], [18.1, 16886.0], [18.2, 16889.0], [18.3, 16951.0], [18.4, 17027.0], [18.5, 17048.0], [18.6, 17095.0], [18.7, 17102.0], [18.8, 17108.0], [18.9, 17109.0], [19.0, 17113.0], [19.1, 17119.0], [19.2, 17119.0], [19.3, 17123.0], [19.4, 17139.0], [19.5, 17151.0], [19.6, 17181.0], [19.7, 17186.0], [19.8, 17190.0], [19.9, 17226.0], [20.0, 17260.0], [20.1, 17278.0], [20.2, 17278.0], [20.3, 17312.0], [20.4, 17340.0], [20.5, 17352.0], [20.6, 17358.0], [20.7, 17367.0], [20.8, 17377.0], [20.9, 17394.0], [21.0, 17400.0], [21.1, 17416.0], [21.2, 17418.0], [21.3, 17420.0], [21.4, 17497.0], [21.5, 17498.0], [21.6, 17498.0], [21.7, 17505.0], [21.8, 17507.0], [21.9, 17524.0], [22.0, 17529.0], [22.1, 17543.0], [22.2, 17545.0], [22.3, 17568.0], [22.4, 17577.0], [22.5, 17577.0], [22.6, 17594.0], [22.7, 17598.0], [22.8, 17598.0], [22.9, 17601.0], [23.0, 17609.0], [23.1, 17617.0], [23.2, 17618.0], [23.3, 17628.0], [23.4, 17629.0], [23.5, 17635.0], [23.6, 17637.0], [23.7, 17638.0], [23.8, 17641.0], [23.9, 17645.0], [24.0, 17649.0], [24.1, 17668.0], [24.2, 17674.0], [24.3, 17674.0], [24.4, 17688.0], [24.5, 17707.0], [24.6, 17711.0], [24.7, 17713.0], [24.8, 17713.0], [24.9, 17716.0], [25.0, 17716.0], [25.1, 17724.0], [25.2, 17726.0], [25.3, 17732.0], [25.4, 17741.0], [25.5, 17750.0], [25.6, 17751.0], [25.7, 17752.0], [25.8, 17758.0], [25.9, 17766.0], [26.0, 17768.0], [26.1, 17788.0], [26.2, 17822.0], [26.3, 17830.0], [26.4, 17832.0], [26.5, 17839.0], [26.6, 17848.0], [26.7, 17860.0], [26.8, 17864.0], [26.9, 17876.0], [27.0, 17880.0], [27.1, 17883.0], [27.2, 17891.0], [27.3, 17892.0], [27.4, 17900.0], [27.5, 17908.0], [27.6, 17916.0], [27.7, 17917.0], [27.8, 17920.0], [27.9, 17921.0], [28.0, 17932.0], [28.1, 17953.0], [28.2, 17958.0], [28.3, 17958.0], [28.4, 17970.0], [28.5, 17985.0], [28.6, 17987.0], [28.7, 17987.0], [28.8, 17988.0], [28.9, 17990.0], [29.0, 17996.0], [29.1, 18000.0], [29.2, 18007.0], [29.3, 18026.0], [29.4, 18038.0], [29.5, 18041.0], [29.6, 18044.0], [29.7, 18072.0], [29.8, 18072.0], [29.9, 18078.0], [30.0, 18093.0], [30.1, 18109.0], [30.2, 18117.0], [30.3, 18118.0], [30.4, 18121.0], [30.5, 18129.0], [30.6, 18129.0], [30.7, 18147.0], [30.8, 18170.0], [30.9, 18193.0], [31.0, 18196.0], [31.1, 18215.0], [31.2, 18235.0], [31.3, 18237.0], [31.4, 18240.0], [31.5, 18250.0], [31.6, 18258.0], [31.7, 18277.0], [31.8, 18290.0], [31.9, 18293.0], [32.0, 18307.0], [32.1, 18309.0], [32.2, 18312.0], [32.3, 18322.0], [32.4, 18327.0], [32.5, 18328.0], [32.6, 18337.0], [32.7, 18337.0], [32.8, 18340.0], [32.9, 18369.0], [33.0, 18406.0], [33.1, 18411.0], [33.2, 18416.0], [33.3, 18429.0], [33.4, 18433.0], [33.5, 18445.0], [33.6, 18451.0], [33.7, 18455.0], [33.8, 18455.0], [33.9, 18458.0], [34.0, 18466.0], [34.1, 18479.0], [34.2, 18487.0], [34.3, 18491.0], [34.4, 18495.0], [34.5, 18498.0], [34.6, 18498.0], [34.7, 18508.0], [34.8, 18528.0], [34.9, 18533.0], [35.0, 18544.0], [35.1, 18556.0], [35.2, 18562.0], [35.3, 18572.0], [35.4, 18572.0], [35.5, 18576.0], [35.6, 18586.0], [35.7, 18586.0], [35.8, 18592.0], [35.9, 18598.0], [36.0, 18618.0], [36.1, 18627.0], [36.2, 18645.0], [36.3, 18655.0], [36.4, 18661.0], [36.5, 18661.0], [36.6, 18665.0], [36.7, 18670.0], [36.8, 18681.0], [36.9, 18684.0], [37.0, 18687.0], [37.1, 18696.0], [37.2, 18702.0], [37.3, 18706.0], [37.4, 18717.0], [37.5, 18724.0], [37.6, 18734.0], [37.7, 18739.0], [37.8, 18756.0], [37.9, 18767.0], [38.0, 18782.0], [38.1, 18793.0], [38.2, 18800.0], [38.3, 18825.0], [38.4, 18827.0], [38.5, 18831.0], [38.6, 18835.0], [38.7, 18843.0], [38.8, 18850.0], [38.9, 18856.0], [39.0, 18860.0], [39.1, 18883.0], [39.2, 18897.0], [39.3, 18897.0], [39.4, 18906.0], [39.5, 18918.0], [39.6, 18942.0], [39.7, 18946.0], [39.8, 18950.0], [39.9, 18970.0], [40.0, 18973.0], [40.1, 18977.0], [40.2, 18978.0], [40.3, 18983.0], [40.4, 18993.0], [40.5, 18997.0], [40.6, 19001.0], [40.7, 19009.0], [40.8, 19025.0], [40.9, 19079.0], [41.0, 19083.0], [41.1, 19087.0], [41.2, 19093.0], [41.3, 19101.0], [41.4, 19114.0], [41.5, 19128.0], [41.6, 19138.0], [41.7, 19140.0], [41.8, 19151.0], [41.9, 19158.0], [42.0, 19160.0], [42.1, 19163.0], [42.2, 19168.0], [42.3, 19169.0], [42.4, 19176.0], [42.5, 19195.0], [42.6, 19201.0], [42.7, 19240.0], [42.8, 19246.0], [42.9, 19274.0], [43.0, 19286.0], [43.1, 19334.0], [43.2, 19354.0], [43.3, 19395.0], [43.4, 19411.0], [43.5, 19413.0], [43.6, 19413.0], [43.7, 19420.0], [43.8, 19431.0], [43.9, 19435.0], [44.0, 19444.0], [44.1, 19485.0], [44.2, 19486.0], [44.3, 19502.0], [44.4, 19516.0], [44.5, 19516.0], [44.6, 19525.0], [44.7, 19539.0], [44.8, 19543.0], [44.9, 19603.0], [45.0, 19616.0], [45.1, 19616.0], [45.2, 19658.0], [45.3, 19675.0], [45.4, 19716.0], [45.5, 19718.0], [45.6, 19747.0], [45.7, 19774.0], [45.8, 19782.0], [45.9, 19798.0], [46.0, 19822.0], [46.1, 19835.0], [46.2, 19837.0], [46.3, 19839.0], [46.4, 19867.0], [46.5, 19871.0], [46.6, 19872.0], [46.7, 19884.0], [46.8, 19900.0], [46.9, 19952.0], [47.0, 20003.0], [47.1, 20023.0], [47.2, 20077.0], [47.3, 20116.0], [47.4, 20117.0], [47.5, 20132.0], [47.6, 20211.0], [47.7, 20225.0], [47.8, 20233.0], [47.9, 20255.0], [48.0, 20257.0], [48.1, 20296.0], [48.2, 20297.0], [48.3, 20305.0], [48.4, 20315.0], [48.5, 20453.0], [48.6, 20548.0], [48.7, 20554.0], [48.8, 20558.0], [48.9, 20575.0], [49.0, 20648.0], [49.1, 20952.0], [49.2, 20987.0], [49.3, 21013.0], [49.4, 22215.0], [49.5, 27289.0], [49.6, 27348.0], [49.7, 27390.0], [49.8, 27574.0], [49.9, 27720.0], [50.0, 27838.0], [50.1, 27884.0], [50.2, 28005.0], [50.3, 28124.0], [50.4, 28171.0], [50.5, 28174.0], [50.6, 28182.0], [50.7, 28318.0], [50.8, 28401.0], [50.9, 28457.0], [51.0, 28635.0], [51.1, 28676.0], [51.2, 28726.0], [51.3, 29001.0], [51.4, 29069.0], [51.5, 29138.0], [51.6, 29139.0], [51.7, 29154.0], [51.8, 29182.0], [51.9, 29204.0], [52.0, 29205.0], [52.1, 29273.0], [52.2, 29287.0], [52.3, 29292.0], [52.4, 29396.0], [52.5, 29470.0], [52.6, 29509.0], [52.7, 29529.0], [52.8, 29557.0], [52.9, 29561.0], [53.0, 29627.0], [53.1, 29630.0], [53.2, 29698.0], [53.3, 29757.0], [53.4, 29792.0], [53.5, 29891.0], [53.6, 29916.0], [53.7, 29921.0], [53.8, 29925.0], [53.9, 29929.0], [54.0, 29937.0], [54.1, 29986.0], [54.2, 29993.0], [54.3, 30002.0], [54.4, 30047.0], [54.5, 30057.0], [54.6, 30088.0], [54.7, 30092.0], [54.8, 30104.0], [54.9, 30116.0], [55.0, 30132.0], [55.1, 30135.0], [55.2, 30147.0], [55.3, 30151.0], [55.4, 30162.0], [55.5, 30202.0], [55.6, 30204.0], [55.7, 30209.0], [55.8, 30224.0], [55.9, 30232.0], [56.0, 30242.0], [56.1, 30252.0], [56.2, 30258.0], [56.3, 30273.0], [56.4, 30274.0], [56.5, 30276.0], [56.6, 30278.0], [56.7, 30296.0], [56.8, 30300.0], [56.9, 30307.0], [57.0, 30334.0], [57.1, 30338.0], [57.2, 30349.0], [57.3, 30351.0], [57.4, 30351.0], [57.5, 30360.0], [57.6, 30362.0], [57.7, 30368.0], [57.8, 30438.0], [57.9, 30443.0], [58.0, 30448.0], [58.1, 30451.0], [58.2, 30451.0], [58.3, 30462.0], [58.4, 30466.0], [58.5, 30471.0], [58.6, 30495.0], [58.7, 30503.0], [58.8, 30513.0], [58.9, 30523.0], [59.0, 30529.0], [59.1, 30533.0], [59.2, 30535.0], [59.3, 30555.0], [59.4, 30563.0], [59.5, 30574.0], [59.6, 30580.0], [59.7, 30581.0], [59.8, 30601.0], [59.9, 30673.0], [60.0, 30673.0], [60.1, 30678.0], [60.2, 30683.0], [60.3, 30691.0], [60.4, 30718.0], [60.5, 30729.0], [60.6, 30744.0], [60.7, 30780.0], [60.8, 30798.0], [60.9, 30817.0], [61.0, 30818.0], [61.1, 30819.0], [61.2, 30834.0], [61.3, 30842.0], [61.4, 30851.0], [61.5, 30853.0], [61.6, 30855.0], [61.7, 30873.0], [61.8, 30906.0], [61.9, 30933.0], [62.0, 30976.0], [62.1, 30991.0], [62.2, 31014.0], [62.3, 31052.0], [62.4, 31053.0], [62.5, 31063.0], [62.6, 31067.0], [62.7, 31073.0], [62.8, 31079.0], [62.9, 31090.0], [63.0, 31101.0], [63.1, 31110.0], [63.2, 31119.0], [63.3, 31123.0], [63.4, 31141.0], [63.5, 31146.0], [63.6, 31151.0], [63.7, 31151.0], [63.8, 31160.0], [63.9, 31171.0], [64.0, 31183.0], [64.1, 31186.0], [64.2, 31193.0], [64.3, 31194.0], [64.4, 31197.0], [64.5, 31199.0], [64.6, 31213.0], [64.7, 31224.0], [64.8, 31226.0], [64.9, 31232.0], [65.0, 31250.0], [65.1, 31250.0], [65.2, 31270.0], [65.3, 31296.0], [65.4, 31300.0], [65.5, 31315.0], [65.6, 31347.0], [65.7, 31357.0], [65.8, 31358.0], [65.9, 31365.0], [66.0, 31367.0], [66.1, 31380.0], [66.2, 31387.0], [66.3, 31392.0], [66.4, 31399.0], [66.5, 31412.0], [66.6, 31435.0], [66.7, 31439.0], [66.8, 31448.0], [66.9, 31468.0], [67.0, 31472.0], [67.1, 31483.0], [67.2, 31487.0], [67.3, 31489.0], [67.4, 31523.0], [67.5, 31527.0], [67.6, 31534.0], [67.7, 31536.0], [67.8, 31568.0], [67.9, 31578.0], [68.0, 31579.0], [68.1, 31583.0], [68.2, 31594.0], [68.3, 31600.0], [68.4, 31607.0], [68.5, 31638.0], [68.6, 31641.0], [68.7, 31650.0], [68.8, 31671.0], [68.9, 31673.0], [69.0, 31677.0], [69.1, 31682.0], [69.2, 31720.0], [69.3, 31738.0], [69.4, 31740.0], [69.5, 31755.0], [69.6, 31770.0], [69.7, 31800.0], [69.8, 31821.0], [69.9, 31823.0], [70.0, 31850.0], [70.1, 31855.0], [70.2, 31893.0], [70.3, 31896.0], [70.4, 31897.0], [70.5, 31903.0], [70.6, 31933.0], [70.7, 31943.0], [70.8, 31950.0], [70.9, 31951.0], [71.0, 31953.0], [71.1, 31979.0], [71.2, 31979.0], [71.3, 31979.0], [71.4, 31985.0], [71.5, 31987.0], [71.6, 31994.0], [71.7, 32025.0], [71.8, 32034.0], [71.9, 32059.0], [72.0, 32067.0], [72.1, 32086.0], [72.2, 32105.0], [72.3, 32145.0], [72.4, 32155.0], [72.5, 32156.0], [72.6, 32158.0], [72.7, 32170.0], [72.8, 32199.0], [72.9, 32210.0], [73.0, 32212.0], [73.1, 32217.0], [73.2, 32224.0], [73.3, 32230.0], [73.4, 32238.0], [73.5, 32275.0], [73.6, 32311.0], [73.7, 32317.0], [73.8, 32318.0], [73.9, 32346.0], [74.0, 32354.0], [74.1, 32354.0], [74.2, 32355.0], [74.3, 32356.0], [74.4, 32357.0], [74.5, 32372.0], [74.6, 32389.0], [74.7, 32403.0], [74.8, 32410.0], [74.9, 32429.0], [75.0, 32440.0], [75.1, 32455.0], [75.2, 32468.0], [75.3, 32492.0], [75.4, 32504.0], [75.5, 32507.0], [75.6, 32514.0], [75.7, 32517.0], [75.8, 32522.0], [75.9, 32534.0], [76.0, 32540.0], [76.1, 32563.0], [76.2, 32574.0], [76.3, 32575.0], [76.4, 32580.0], [76.5, 32586.0], [76.6, 32591.0], [76.7, 32613.0], [76.8, 32614.0], [76.9, 32635.0], [77.0, 32646.0], [77.1, 32660.0], [77.2, 32664.0], [77.3, 32669.0], [77.4, 32682.0], [77.5, 32691.0], [77.6, 32699.0], [77.7, 32704.0], [77.8, 32704.0], [77.9, 32708.0], [78.0, 32720.0], [78.1, 32723.0], [78.2, 32724.0], [78.3, 32734.0], [78.4, 32739.0], [78.5, 32748.0], [78.6, 32750.0], [78.7, 32768.0], [78.8, 32797.0], [78.9, 32807.0], [79.0, 32810.0], [79.1, 32810.0], [79.2, 32825.0], [79.3, 32828.0], [79.4, 32862.0], [79.5, 32885.0], [79.6, 32894.0], [79.7, 32902.0], [79.8, 32906.0], [79.9, 32929.0], [80.0, 32937.0], [80.1, 32940.0], [80.2, 32945.0], [80.3, 32952.0], [80.4, 32974.0], [80.5, 32988.0], [80.6, 32990.0], [80.7, 33009.0], [80.8, 33032.0], [80.9, 33047.0], [81.0, 33065.0], [81.1, 33091.0], [81.2, 33094.0], [81.3, 33115.0], [81.4, 33139.0], [81.5, 33162.0], [81.6, 33170.0], [81.7, 33204.0], [81.8, 33205.0], [81.9, 33205.0], [82.0, 33230.0], [82.1, 33248.0], [82.2, 33255.0], [82.3, 33284.0], [82.4, 33306.0], [82.5, 33310.0], [82.6, 33320.0], [82.7, 33323.0], [82.8, 33334.0], [82.9, 33350.0], [83.0, 33397.0], [83.1, 33408.0], [83.2, 33427.0], [83.3, 33447.0], [83.4, 33470.0], [83.5, 33470.0], [83.6, 33515.0], [83.7, 33540.0], [83.8, 33553.0], [83.9, 33561.0], [84.0, 33572.0], [84.1, 33618.0], [84.2, 33631.0], [84.3, 33634.0], [84.4, 33636.0], [84.5, 33671.0], [84.6, 33676.0], [84.7, 33696.0], [84.8, 33742.0], [84.9, 33747.0], [85.0, 33767.0], [85.1, 33768.0], [85.2, 33783.0], [85.3, 33791.0], [85.4, 33806.0], [85.5, 33847.0], [85.6, 33867.0], [85.7, 33885.0], [85.8, 33886.0], [85.9, 33917.0], [86.0, 33918.0], [86.1, 33919.0], [86.2, 33956.0], [86.3, 33979.0], [86.4, 33981.0], [86.5, 33983.0], [86.6, 33993.0], [86.7, 34013.0], [86.8, 34023.0], [86.9, 34025.0], [87.0, 34037.0], [87.1, 34040.0], [87.2, 34082.0], [87.3, 34109.0], [87.4, 34137.0], [87.5, 34147.0], [87.6, 34160.0], [87.7, 34170.0], [87.8, 34194.0], [87.9, 34196.0], [88.0, 34275.0], [88.1, 34313.0], [88.2, 34372.0], [88.3, 34375.0], [88.4, 34425.0], [88.5, 34449.0], [88.6, 34480.0], [88.7, 34484.0], [88.8, 34508.0], [88.9, 34547.0], [89.0, 34661.0], [89.1, 34722.0], [89.2, 34771.0], [89.3, 34862.0], [89.4, 34909.0], [89.5, 34917.0], [89.6, 34918.0], [89.7, 34935.0], [89.8, 34938.0], [89.9, 34947.0], [90.0, 34952.0], [90.1, 34981.0], [90.2, 34998.0], [90.3, 35017.0], [90.4, 35024.0], [90.5, 35059.0], [90.6, 35070.0], [90.7, 35151.0], [90.8, 35173.0], [90.9, 35178.0], [91.0, 35182.0], [91.1, 35184.0], [91.2, 35185.0], [91.3, 35235.0], [91.4, 35273.0], [91.5, 35291.0], [91.6, 35425.0], [91.7, 35465.0], [91.8, 35548.0], [91.9, 35598.0], [92.0, 35662.0], [92.1, 35794.0], [92.2, 35863.0], [92.3, 35901.0], [92.4, 35908.0], [92.5, 36097.0], [92.6, 36169.0], [92.7, 36208.0], [92.8, 36279.0], [92.9, 36391.0], [93.0, 36411.0], [93.1, 36824.0], [93.2, 36892.0], [93.3, 36988.0], [93.4, 36995.0], [93.5, 37009.0], [93.6, 37067.0], [93.7, 37137.0], [93.8, 37150.0], [93.9, 37312.0], [94.0, 37682.0], [94.1, 37776.0], [94.2, 37797.0], [94.3, 37929.0], [94.4, 37963.0], [94.5, 38198.0], [94.6, 38232.0], [94.7, 38312.0], [94.8, 38344.0], [94.9, 38361.0], [95.0, 38426.0], [95.1, 38491.0], [95.2, 38492.0], [95.3, 38558.0], [95.4, 38644.0], [95.5, 38910.0], [95.6, 39028.0], [95.7, 39121.0], [95.8, 39150.0], [95.9, 39238.0], [96.0, 39254.0], [96.1, 39419.0], [96.2, 39565.0], [96.3, 39807.0], [96.4, 39821.0], [96.5, 39875.0], [96.6, 40081.0], [96.7, 40203.0], [96.8, 40273.0], [96.9, 42228.0], [97.0, 42266.0], [97.1, 42487.0], [97.2, 42573.0], [97.3, 42573.0], [97.4, 42583.0], [97.5, 42630.0], [97.6, 42844.0], [97.7, 42963.0], [97.8, 43487.0], [97.9, 44209.0], [98.0, 44257.0], [98.1, 44375.0], [98.2, 44457.0], [98.3, 44475.0], [98.4, 44611.0], [98.5, 44796.0], [98.6, 44828.0], [98.7, 44847.0], [98.8, 44884.0], [98.9, 44964.0], [99.0, 44975.0], [99.1, 44988.0], [99.2, 45052.0], [99.3, 45077.0], [99.4, 45078.0], [99.5, 45470.0], [99.6, 45641.0], [99.7, 45749.0], [99.8, 45859.0], [99.9, 46159.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 6000.0, "maxY": 26.0, "series": [{"data": [[32900.0, 10.0], [33300.0, 7.0], [33700.0, 6.0], [34100.0, 7.0], [34500.0, 2.0], [34900.0, 9.0], [35700.0, 1.0], [36100.0, 1.0], [36900.0, 2.0], [37300.0, 1.0], [37700.0, 2.0], [38100.0, 1.0], [38500.0, 1.0], [38900.0, 1.0], [42500.0, 3.0], [42900.0, 1.0], [44900.0, 3.0], [45700.0, 1.0], [46100.0, 1.0], [6000.0, 3.0], [6100.0, 3.0], [6200.0, 1.0], [6400.0, 5.0], [6500.0, 6.0], [6600.0, 14.0], [6700.0, 26.0], [6800.0, 10.0], [6900.0, 10.0], [7000.0, 13.0], [7100.0, 1.0], [7200.0, 6.0], [7300.0, 4.0], [7400.0, 1.0], [7500.0, 3.0], [7600.0, 3.0], [7700.0, 3.0], [7800.0, 5.0], [7900.0, 4.0], [8000.0, 3.0], [8100.0, 1.0], [10000.0, 1.0], [15200.0, 2.0], [15300.0, 4.0], [15400.0, 3.0], [15600.0, 1.0], [15500.0, 2.0], [15700.0, 2.0], [15800.0, 3.0], [15900.0, 5.0], [16000.0, 3.0], [16100.0, 4.0], [16200.0, 3.0], [16300.0, 3.0], [17200.0, 4.0], [16600.0, 1.0], [16800.0, 7.0], [16400.0, 1.0], [17000.0, 3.0], [17400.0, 7.0], [18200.0, 9.0], [17600.0, 16.0], [17800.0, 12.0], [18000.0, 10.0], [18400.0, 17.0], [19200.0, 5.0], [18600.0, 12.0], [18800.0, 12.0], [19000.0, 7.0], [19400.0, 9.0], [19600.0, 5.0], [19800.0, 8.0], [20000.0, 3.0], [20200.0, 7.0], [20400.0, 1.0], [20600.0, 1.0], [21000.0, 1.0], [22200.0, 1.0], [27200.0, 1.0], [27800.0, 2.0], [28000.0, 1.0], [28400.0, 2.0], [28600.0, 2.0], [29200.0, 5.0], [29000.0, 2.0], [29600.0, 3.0], [29400.0, 1.0], [29800.0, 1.0], [30000.0, 5.0], [30200.0, 13.0], [30400.0, 9.0], [30600.0, 6.0], [30800.0, 9.0], [31000.0, 8.0], [31200.0, 8.0], [31400.0, 9.0], [31600.0, 9.0], [31800.0, 8.0], [32000.0, 5.0], [32200.0, 7.0], [32400.0, 8.0], [32600.0, 10.0], [34400.0, 4.0], [32800.0, 8.0], [33200.0, 7.0], [33600.0, 7.0], [34000.0, 6.0], [34800.0, 1.0], [35200.0, 3.0], [35600.0, 1.0], [36000.0, 1.0], [36400.0, 1.0], [36800.0, 2.0], [37600.0, 1.0], [38400.0, 3.0], [39200.0, 2.0], [40000.0, 1.0], [42400.0, 1.0], [42800.0, 1.0], [44800.0, 3.0], [44400.0, 2.0], [45600.0, 1.0], [33100.0, 4.0], [33500.0, 5.0], [33900.0, 8.0], [34300.0, 3.0], [34700.0, 2.0], [35100.0, 6.0], [35500.0, 2.0], [35900.0, 2.0], [36300.0, 1.0], [37100.0, 2.0], [37900.0, 2.0], [38300.0, 3.0], [39100.0, 2.0], [39500.0, 1.0], [44300.0, 1.0], [44700.0, 1.0], [16500.0, 7.0], [16700.0, 6.0], [17100.0, 11.0], [17300.0, 7.0], [16900.0, 1.0], [17500.0, 12.0], [17700.0, 17.0], [17900.0, 17.0], [18100.0, 10.0], [18300.0, 10.0], [18500.0, 13.0], [18700.0, 10.0], [18900.0, 12.0], [19100.0, 13.0], [19300.0, 3.0], [19500.0, 6.0], [19700.0, 6.0], [19900.0, 2.0], [20100.0, 3.0], [20300.0, 2.0], [20500.0, 4.0], [20900.0, 2.0], [27500.0, 1.0], [27300.0, 2.0], [28100.0, 4.0], [27700.0, 1.0], [28300.0, 1.0], [29100.0, 4.0], [28700.0, 1.0], [29500.0, 4.0], [29300.0, 1.0], [29900.0, 7.0], [29700.0, 2.0], [30100.0, 7.0], [30300.0, 10.0], [30500.0, 11.0], [30700.0, 5.0], [31500.0, 9.0], [30900.0, 4.0], [31100.0, 16.0], [31300.0, 11.0], [31700.0, 5.0], [31900.0, 12.0], [32100.0, 7.0], [32300.0, 11.0], [32500.0, 13.0], [32700.0, 12.0], [33000.0, 6.0], [33400.0, 5.0], [33800.0, 5.0], [34200.0, 1.0], [34600.0, 1.0], [35000.0, 4.0], [35400.0, 2.0], [35800.0, 1.0], [36200.0, 2.0], [37000.0, 2.0], [38200.0, 1.0], [38600.0, 1.0], [39000.0, 1.0], [39400.0, 1.0], [39800.0, 3.0], [40200.0, 2.0], [42200.0, 2.0], [42600.0, 1.0], [43400.0, 1.0], [44200.0, 2.0], [44600.0, 1.0], [45000.0, 3.0], [45400.0, 1.0], [45800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 46100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 16.03225806451613, "minX": 1.70229876E12, "maxY": 518.9876160990708, "series": [{"data": [[1.70229876E12, 518.9876160990708], [1.70229882E12, 16.03225806451613]], "isOverall": false, "label": "Users1000", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70229882E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6674.133333333332, "minX": 1.0, "maxY": 46159.0, "series": [{"data": [[2.0, 45859.0], [3.0, 45749.0], [4.0, 45641.0], [5.0, 45078.0], [6.0, 45077.0], [7.0, 45470.0], [8.0, 45052.0], [9.0, 44975.0], [10.0, 44988.0], [11.0, 44796.0], [12.0, 44964.0], [14.0, 44542.5], [15.0, 44457.0], [16.0, 44847.0], [17.0, 44475.0], [18.0, 44611.0], [19.0, 44884.0], [20.0, 44375.0], [21.0, 44209.0], [22.0, 43487.0], [23.0, 42844.0], [24.0, 42573.0], [25.0, 42573.0], [26.0, 42963.0], [27.0, 42630.0], [28.0, 42583.0], [29.0, 42487.0], [30.0, 42266.0], [31.0, 42228.0], [33.0, 40273.0], [32.0, 40081.0], [35.0, 39807.0], [34.0, 39875.0], [37.0, 39565.0], [36.0, 40203.0], [39.0, 39150.0], [38.0, 39821.0], [41.0, 39254.0], [40.0, 39238.0], [43.0, 38910.0], [42.0, 39419.0], [45.0, 38492.0], [44.0, 38558.0], [47.0, 39028.0], [46.0, 39121.0], [49.0, 37963.0], [48.0, 38426.0], [51.0, 38198.0], [50.0, 38644.0], [53.0, 38361.0], [52.0, 38491.0], [55.0, 38312.0], [54.0, 38344.0], [57.0, 37929.0], [56.0, 38232.0], [59.0, 37797.0], [58.0, 37682.0], [61.0, 37150.0], [60.0, 37776.0], [63.0, 37312.0], [62.0, 36988.0], [67.0, 36995.0], [66.0, 37067.0], [65.0, 37009.0], [64.0, 37137.0], [71.0, 36208.0], [70.0, 36411.0], [69.0, 36824.0], [68.0, 36892.0], [75.0, 36169.0], [74.0, 35465.0], [73.0, 36279.0], [72.0, 36391.0], [79.0, 35901.0], [78.0, 35908.0], [77.0, 35273.0], [76.0, 36097.0], [83.0, 34981.0], [82.0, 35662.0], [81.0, 35794.0], [80.0, 35863.0], [87.0, 35184.0], [86.0, 35548.0], [85.0, 35598.0], [84.0, 35291.0], [91.0, 35182.0], [90.0, 35235.0], [89.0, 35017.0], [88.0, 35425.0], [95.0, 35173.0], [94.0, 34480.0], [93.0, 35151.0], [92.0, 35185.0], [99.0, 34935.0], [98.0, 35070.0], [97.0, 35059.0], [96.0, 35178.0], [103.0, 34938.0], [102.0, 34722.0], [101.0, 34862.0], [100.0, 35024.0], [107.0, 34917.5], [105.0, 34952.0], [104.0, 34998.0], [111.0, 34508.0], [110.0, 34771.0], [109.0, 34909.0], [108.0, 34947.0], [115.0, 34147.0], [114.0, 34425.0], [113.0, 34313.0], [112.0, 34449.0], [119.0, 34371.5], [117.0, 33917.0], [116.0, 34196.0], [123.0, 33956.0], [122.0, 34160.0], [121.0, 34372.0], [120.0, 34547.0], [127.0, 33847.0], [126.0, 33886.0], [125.0, 34375.0], [124.0, 34484.0], [135.0, 34025.0], [134.0, 33634.0], [133.0, 34170.0], [132.0, 34023.0], [131.0, 33918.0], [130.0, 34194.0], [129.0, 33981.0], [128.0, 34275.0], [143.0, 33540.0], [142.0, 34013.0], [141.0, 34040.0], [140.0, 33993.0], [139.0, 33306.0], [138.0, 34109.0], [137.0, 34137.0], [136.0, 34037.0], [151.0, 33834.0], [149.0, 33320.0], [148.0, 33919.0], [147.0, 33983.0], [146.0, 33979.0], [145.0, 33515.0], [144.0, 33768.0], [159.0, 33742.0], [158.0, 33767.0], [157.0, 33561.0], [156.0, 33806.0], [155.0, 33032.0], [154.0, 33791.0], [153.0, 33470.0], [152.0, 33867.0], [167.0, 32885.0], [166.0, 33676.0], [165.0, 33696.0], [164.0, 33300.0], [162.0, 33170.0], [161.0, 32940.0], [160.0, 33747.0], [175.0, 32768.0], [174.0, 33094.0], [173.0, 33618.0], [172.0, 33572.0], [171.0, 33553.0], [170.0, 33310.0], [169.0, 33636.0], [168.0, 33631.0], [183.0, 33230.0], [182.0, 33397.0], [181.0, 33427.0], [180.0, 33176.5], [178.0, 33470.0], [177.0, 32724.0], [176.0, 33047.0], [191.0, 33284.0], [190.0, 32810.0], [189.0, 33323.0], [188.0, 33139.0], [187.0, 33350.0], [186.0, 33334.0], [185.0, 33408.0], [184.0, 32937.0], [199.0, 33009.0], [198.0, 32748.0], [197.0, 33255.0], [196.0, 33248.0], [195.0, 33065.0], [194.0, 33204.0], [193.0, 32461.0], [192.0, 33115.0], [207.0, 33091.0], [206.0, 32574.0], [205.0, 32810.5], [203.0, 32974.0], [202.0, 33162.0], [201.0, 33205.0], [200.0, 33205.0], [214.0, 32217.0], [213.0, 32704.0], [212.0, 32797.0], [211.0, 32990.0], [210.0, 32988.0], [209.0, 32275.0], [208.0, 32810.0], [223.0, 32704.0], [222.0, 32691.0], [221.0, 32894.0], [220.0, 32902.0], [219.0, 32862.0], [218.0, 32591.0], [217.0, 32699.0], [216.0, 32826.5], [231.0, 32739.0], [230.0, 32750.0], [229.0, 32238.0], [228.0, 32825.0], [227.0, 32602.0], [225.0, 32828.0], [224.0, 32807.0], [239.0, 32664.0], [238.0, 32720.0], [237.0, 32354.0], [236.0, 32318.0], [235.0, 32224.0], [234.0, 32734.0], [233.0, 32540.0], [232.0, 32504.0], [247.0, 31897.0], [246.0, 32586.0], [245.0, 32614.0], [244.0, 32354.0], [243.0, 31943.0], [242.0, 32199.0], [241.0, 32723.0], [240.0, 32389.0], [255.0, 32563.0], [254.0, 32613.0], [253.0, 32210.0], [252.0, 32575.0], [251.0, 32660.0], [250.0, 32455.0], [249.0, 32635.0], [248.0, 32646.0], [270.0, 32372.0], [271.0, 32346.0], [269.0, 32170.0], [268.0, 32105.0], [267.0, 32355.0], [266.0, 32514.0], [265.0, 32089.0], [263.0, 32357.0], [257.0, 32492.0], [256.0, 32580.0], [259.0, 32517.0], [258.0, 32534.0], [262.0, 31951.0], [261.0, 32507.0], [260.0, 32429.0], [286.0, 32230.0], [287.0, 31755.0], [285.0, 31677.0], [284.0, 31483.0], [283.0, 32311.0], [282.0, 32059.0], [281.0, 32317.0], [280.0, 31594.0], [279.0, 31823.0], [273.0, 32410.0], [272.0, 32468.0], [275.0, 31994.0], [274.0, 32403.0], [278.0, 31978.0], [276.0, 31893.0], [302.0, 32067.0], [303.0, 32025.0], [301.0, 31788.0], [300.0, 31979.0], [298.0, 32086.0], [297.0, 32145.0], [296.0, 31367.0], [295.0, 31933.0], [289.0, 32034.0], [288.0, 32158.0], [291.0, 32212.0], [290.0, 31412.0], [294.0, 31979.0], [293.0, 32155.0], [292.0, 32156.0], [318.0, 31171.0], [319.0, 31151.0], [317.0, 31987.0], [316.0, 31770.0], [315.0, 31197.0], [314.0, 31583.0], [313.0, 31950.0], [312.0, 31953.0], [311.0, 31740.0], [305.0, 31985.0], [304.0, 31800.0], [307.0, 31523.0], [306.0, 31979.0], [310.0, 31720.0], [309.0, 31347.0], [334.0, 31439.0], [335.0, 31186.0], [333.0, 31682.0], [332.0, 30991.0], [331.0, 31423.0], [329.0, 31821.0], [328.0, 31053.0], [327.0, 31896.0], [321.0, 31638.0], [320.0, 31579.0], [323.0, 31435.0], [322.0, 31387.0], [326.0, 31850.0], [325.0, 31607.0], [324.0, 31855.0], [350.0, 31365.0], [351.0, 31110.0], [348.0, 31578.0], [339.0, 31671.0], [338.0, 31365.0], [337.0, 31380.0], [336.0, 31358.0], [347.0, 31250.0], [346.0, 31650.0], [345.0, 31151.0], [344.0, 30851.0], [343.0, 31075.5], [341.0, 31568.0], [340.0, 31641.0], [366.0, 31257.5], [367.0, 31399.0], [364.0, 31448.0], [355.0, 31146.0], [354.0, 31530.5], [352.0, 31270.0], [363.0, 30878.5], [361.0, 31487.0], [360.0, 31193.0], [359.0, 31232.0], [358.0, 31472.0], [357.0, 31014.0], [356.0, 31101.0], [382.0, 30443.0], [383.0, 31213.0], [381.0, 31224.0], [380.0, 31199.0], [379.0, 31250.0], [378.0, 30471.0], [377.0, 31063.0], [376.0, 31300.0], [375.0, 30807.5], [369.0, 31347.0], [368.0, 30601.0], [371.0, 31160.0], [370.0, 30581.0], [373.0, 30574.0], [372.0, 31315.0], [398.0, 30495.0], [399.0, 30232.0], [397.0, 30252.0], [396.0, 30278.0], [395.0, 30503.0], [394.0, 31067.0], [393.0, 31073.0], [392.0, 31141.0], [391.0, 31119.0], [385.0, 31090.0], [384.0, 30976.0], [387.0, 30853.0], [386.0, 31183.0], [390.0, 30580.0], [389.0, 30535.0], [388.0, 30718.0], [414.0, 30523.0], [415.0, 30691.0], [413.0, 30834.0], [412.0, 30088.0], [411.0, 30116.0], [410.0, 30873.0], [409.0, 30673.0], [408.0, 30933.0], [407.0, 30906.0], [400.0, 30204.0], [403.0, 30442.5], [401.0, 30842.0], [406.0, 30307.0], [405.0, 30798.0], [404.0, 30819.0], [430.0, 30533.0], [431.0, 30451.0], [429.0, 30351.0], [428.0, 30132.0], [427.0, 29921.0], [426.0, 30673.0], [425.0, 29929.0], [424.0, 30334.0], [423.0, 30555.0], [416.0, 30729.0], [419.0, 30817.5], [417.0, 30780.0], [422.0, 30002.0], [421.0, 30744.0], [420.0, 30448.0], [444.0, 30068.0], [446.0, 30462.0], [447.0, 30258.0], [445.0, 30349.0], [442.0, 30139.0], [440.0, 30466.0], [439.0, 30104.0], [433.0, 30351.0], [432.0, 30529.0], [435.0, 30451.0], [434.0, 29757.0], [438.0, 30513.0], [437.0, 30274.0], [436.0, 30276.0], [462.0, 30047.0], [463.0, 29630.0], [461.0, 29513.5], [451.0, 30151.0], [450.0, 30209.0], [449.0, 30368.0], [448.0, 30242.0], [459.0, 30224.0], [458.0, 30273.0], [457.0, 29529.0], [456.0, 30296.0], [455.0, 30338.0], [454.0, 30300.0], [453.0, 30360.0], [452.0, 30057.0], [479.0, 29464.333333333332], [476.0, 29925.0], [467.0, 30162.0], [466.0, 30147.0], [465.0, 29396.0], [464.0, 30135.0], [475.0, 29937.0], [474.0, 29993.0], [473.0, 29204.0], [472.0, 29986.0], [471.0, 29792.0], [470.0, 29891.0], [469.0, 29509.0], [468.0, 30092.0], [494.0, 28174.0], [495.0, 28318.0], [493.0, 28635.0], [492.0, 28457.0], [491.0, 28676.0], [490.0, 28182.0], [489.0, 29139.0], [488.0, 29138.0], [487.0, 29182.0], [481.0, 29154.0], [480.0, 29069.0], [483.0, 28726.0], [482.0, 29292.0], [486.0, 29273.0], [485.0, 29001.0], [484.0, 29287.0], [510.0, 21013.0], [511.0, 20599.0], [508.0, 20952.0], [499.0, 27720.0], [498.0, 28005.0], [497.0, 28401.0], [496.0, 27884.0], [507.0, 22215.0], [506.0, 27574.0], [505.0, 27289.0], [504.0, 27348.0], [503.0, 27838.0], [502.0, 27390.0], [501.0, 28124.0], [500.0, 28171.0], [537.0, 20077.0], [541.0, 19413.0], [543.0, 19813.5], [529.0, 19879.5], [531.0, 19413.0], [530.0, 20132.0], [533.0, 19616.0], [532.0, 20003.0], [540.0, 19201.0], [539.0, 19872.0], [538.0, 20023.0], [536.0, 19354.0], [519.0, 20225.0], [518.0, 20305.0], [515.0, 20554.0], [514.0, 20548.0], [513.0, 20648.0], [512.0, 20453.0], [527.0, 20297.0], [526.0, 20305.0], [525.0, 19774.0], [524.0, 20315.0], [523.0, 20296.0], [522.0, 19839.0], [521.0, 20233.0], [520.0, 20255.0], [535.0, 20116.0], [534.0, 20117.0], [572.0, 19539.0], [575.0, 19525.0], [560.0, 19747.0], [562.0, 19431.0], [561.0, 19716.0], [564.0, 18918.0], [563.0, 19543.0], [574.0, 19240.0], [573.0, 19486.0], [571.0, 19286.0], [570.0, 18831.0], [569.0, 19079.0], [568.0, 18825.0], [559.0, 19395.0], [545.0, 19900.0], [544.0, 19163.0], [547.0, 19867.0], [546.0, 19128.0], [549.0, 19444.0], [548.0, 19884.0], [551.0, 19871.0], [550.0, 19822.0], [558.0, 19718.0], [557.0, 19720.0], [555.0, 19798.0], [554.0, 19616.0], [553.0, 19835.0], [552.0, 19485.0], [567.0, 19658.0], [566.0, 19384.5], [606.0, 19114.0], [595.0, 18993.0], [607.0, 18860.0], [592.0, 19087.0], [594.0, 18706.0], [593.0, 19195.0], [605.0, 18337.0], [604.0, 18726.5], [602.0, 19130.5], [583.0, 18973.0], [582.0, 19037.5], [580.0, 19176.0], [579.0, 18970.0], [578.0, 19516.0], [577.0, 19342.5], [591.0, 19025.0], [590.0, 19004.0], [588.0, 19083.0], [587.0, 19168.0], [586.0, 19158.0], [585.0, 19411.0], [584.0, 19101.0], [598.0, 19160.0], [597.0, 19246.0], [596.0, 18897.0], [636.0, 18369.0], [639.0, 18322.0], [625.0, 18950.0], [624.0, 18724.0], [627.0, 18572.0], [626.0, 18906.0], [629.0, 18827.0], [628.0, 18883.0], [638.0, 18850.0], [637.0, 18856.0], [635.0, 18687.0], [634.0, 18835.0], [633.0, 18843.0], [632.0, 18307.0], [623.0, 18756.0], [608.0, 18997.0], [611.0, 18819.0], [609.0, 18978.0], [613.0, 18661.0], [612.0, 18665.0], [615.0, 18983.0], [614.0, 19009.0], [622.0, 18717.0], [621.0, 18946.0], [620.0, 19001.0], [619.0, 18215.0], [618.0, 18977.0], [617.0, 18684.0], [616.0, 18670.0], [631.0, 18793.0], [630.0, 18645.0], [665.0, 18528.0], [670.0, 18526.0], [671.0, 18455.0], [657.0, 18491.0], [656.0, 18455.0], [659.0, 18627.0], [658.0, 18109.0], [661.0, 18661.0], [660.0, 18078.0], [668.0, 18237.0], [667.0, 18118.0], [666.0, 17891.0], [664.0, 18598.0], [647.0, 18586.0], [646.0, 18739.0], [645.0, 18702.0], [644.0, 18466.0], [643.0, 18800.0], [642.0, 18618.0], [641.0, 18782.0], [640.0, 18767.0], [655.0, 17917.0], [654.0, 18576.0], [653.0, 18681.0], [652.0, 18072.0], [651.0, 18411.0], [650.0, 18193.0], [649.0, 18586.0], [648.0, 18572.0], [663.0, 18327.0], [662.0, 18592.0], [697.0, 18312.0], [702.0, 18277.0], [703.0, 17958.0], [690.0, 18163.5], [688.0, 18041.0], [693.0, 18040.0], [691.0, 18093.0], [701.0, 17543.0], [700.0, 17985.0], [699.0, 18167.5], [696.0, 18293.0], [679.0, 18258.0], [678.0, 18495.0], [677.0, 18479.0], [676.0, 18498.0], [675.0, 18498.0], [674.0, 18533.0], [673.0, 18309.0], [672.0, 18562.0], [687.0, 18416.0], [686.0, 18458.0], [685.0, 18445.0], [684.0, 18433.0], [683.0, 18429.0], [682.0, 18487.0], [681.0, 18340.0], [680.0, 17688.0], [695.0, 18337.0], [694.0, 18170.0], [728.0, 17908.0], [732.0, 17668.0], [735.0, 17987.0], [722.0, 18131.0], [725.0, 17687.5], [723.0, 18129.0], [734.0, 18038.0], [733.0, 17996.0], [731.0, 17848.0], [730.0, 18000.0], [729.0, 17988.0], [719.0, 17752.0], [704.0, 18240.0], [707.0, 18181.0], [705.0, 17892.0], [709.0, 17958.0], [708.0, 18250.0], [711.0, 18044.0], [710.0, 18121.0], [718.0, 17638.0], [717.0, 17713.0], [716.0, 17832.0], [715.0, 17420.0], [714.0, 18196.0], [713.0, 18235.0], [712.0, 17860.0], [727.0, 18026.0], [726.0, 17637.0], [761.0, 17880.0], [765.0, 17766.0], [766.0, 17768.0], [753.0, 17900.0], [752.0, 17113.0], [755.0, 17839.0], [754.0, 17109.0], [757.0, 17400.0], [756.0, 17418.0], [764.0, 17498.0], [763.0, 17788.0], [762.0, 17864.0], [760.0, 17524.0], [743.0, 17921.0], [742.0, 17670.5], [740.0, 17920.0], [739.0, 17953.0], [738.0, 17987.0], [737.0, 17980.0], [751.0, 17674.0], [750.0, 17529.0], [749.0, 17821.5], [747.0, 17517.5], [745.0, 17899.5], [759.0, 17822.0], [758.0, 17568.0], [793.0, 17260.0], [798.0, 17577.0], [799.0, 17498.0], [784.0, 17594.0], [786.0, 17358.0], [785.0, 17645.0], [789.0, 17522.5], [787.0, 17635.0], [797.0, 17617.0], [796.0, 17625.0], [794.0, 17618.0], [792.0, 17278.0], [775.0, 17615.5], [773.0, 17186.0], [772.0, 17732.0], [771.0, 17598.0], [770.0, 17751.0], [769.0, 17750.0], [768.0, 17683.5], [783.0, 17139.0], [782.0, 17741.0], [781.0, 17716.0], [780.0, 17440.25], [776.0, 17716.0], [791.0, 17119.0], [790.0, 17598.0], [828.0, 16434.0], [831.0, 16147.0], [817.0, 17095.0], [816.0, 17278.0], [819.0, 17190.0], [818.0, 17226.0], [821.0, 16742.0], [820.0, 17181.0], [830.0, 16134.0], [829.0, 16794.0], [827.0, 16825.0], [826.0, 17027.0], [825.0, 16889.0], [824.0, 16277.0], [815.0, 16573.0], [801.0, 16808.0], [800.0, 17102.0], [805.0, 17464.5], [803.0, 17070.0], [807.0, 17505.0], [806.0, 17367.0], [814.0, 16841.0], [813.0, 17151.0], [812.0, 17048.0], [811.0, 17312.0], [810.0, 16738.0], [809.0, 17497.0], [808.0, 16742.0], [823.0, 17123.0], [822.0, 17108.0], [860.0, 15930.0], [863.0, 15268.0], [849.0, 16123.0], [848.0, 16306.0], [851.0, 15992.0], [850.0, 16266.0], [853.0, 15453.0], [852.0, 16203.0], [862.0, 15841.0], [861.0, 15939.0], [859.0, 15978.0], [858.0, 16046.0], [857.0, 16066.0], [856.0, 16099.0], [847.0, 15836.0], [833.0, 16798.0], [832.0, 16886.0], [835.0, 16510.0], [834.0, 16829.0], [837.0, 16704.0], [836.0, 16365.0], [839.0, 16536.0], [838.0, 16660.0], [845.0, 15736.0], [844.0, 16521.0], [843.0, 16569.0], [842.0, 16546.0], [841.0, 16519.0], [840.0, 16348.0], [855.0, 16100.0], [854.0, 15913.0], [889.0, 7599.0], [894.0, 7613.0], [895.0, 7498.0], [880.0, 7605.0], [883.0, 7938.0], [881.0, 7988.0], [885.0, 7966.0], [884.0, 7695.0], [893.0, 7759.0], [891.0, 7850.0], [890.0, 7868.0], [888.0, 7863.0], [871.0, 15384.0], [870.0, 15470.0], [869.0, 15487.0], [868.0, 15609.0], [867.0, 15398.0], [866.0, 15521.0], [865.0, 15784.0], [864.0, 15565.0], [879.0, 8036.0], [878.0, 8038.0], [876.0, 8107.0], [875.0, 10087.0], [874.0, 15294.0], [873.0, 15333.0], [872.0, 15367.0], [887.0, 7811.0], [886.0, 7844.0], [901.0, 7365.0], [921.0, 7019.0], [923.0, 6951.6], [920.0, 7054.0], [903.0, 7363.0], [902.0, 7389.0], [900.0, 7241.0], [899.0, 7277.0], [898.0, 7565.0], [897.0, 7558.0], [896.0, 7708.0], [916.0, 7041.333333333333], [913.0, 6707.0], [912.0, 7087.0], [911.0, 7077.0], [910.0, 7137.0], [909.0, 6980.0], [908.0, 7276.0], [907.0, 7284.0], [906.0, 7258.0], [905.0, 7203.0], [904.0, 7379.0], [936.0, 6935.0], [1000.0, 6674.133333333332], [1.0, 46159.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[503.39599999999956, 24401.815999999973]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 58.9, "minX": 1.70229876E12, "maxY": 7354220.933333334, "series": [{"data": [[1.70229876E12, 7354220.933333334], [1.70229882E12, 235278.95]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70229876E12, 1841.1], [1.70229882E12, 58.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70229882E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 23767.214654282736, "minX": 1.70229876E12, "maxY": 44238.22580645161, "series": [{"data": [[1.70229876E12, 23767.214654282736], [1.70229882E12, 44238.22580645161]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70229882E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 21973.82765737871, "minX": 1.70229876E12, "maxY": 42575.354838709674, "series": [{"data": [[1.70229876E12, 21973.82765737871], [1.70229882E12, 42575.354838709674]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70229882E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4090.0196078431413, "minX": 1.70229876E12, "maxY": 4711.612903225806, "series": [{"data": [[1.70229876E12, 4090.0196078431413], [1.70229882E12, 4711.612903225806]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70229882E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6039.0, "minX": 1.70229876E12, "maxY": 46159.0, "series": [{"data": [[1.70229876E12, 40273.0], [1.70229882E12, 46159.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70229876E12, 34082.0], [1.70229882E12, 45727.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70229876E12, 39242.8], [1.70229882E12, 46159.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70229876E12, 35728.0], [1.70229882E12, 45979.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70229876E12, 6039.0], [1.70229882E12, 42228.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70229876E12, 20453.0], [1.70229882E12, 44611.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70229882E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6780.0, "minX": 1.0, "maxY": 44837.5, "series": [{"data": [[131.0, 17766.0], [2.0, 32221.5], [8.0, 37002.0], [35.0, 34918.0], [36.0, 16796.0], [10.0, 38601.0], [45.0, 30104.0], [12.0, 20551.0], [13.0, 28359.5], [55.0, 26541.5], [1.0, 26787.0], [16.0, 44837.5], [17.0, 35863.0], [5.0, 30274.0], [81.0, 30744.0], [87.0, 32720.0], [91.0, 31720.0], [94.0, 6780.0], [24.0, 7827.5], [101.0, 18724.0], [26.0, 15921.5], [7.0, 24463.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 131.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 5677.5, "minX": 1.0, "maxY": 42820.0, "series": [{"data": [[131.0, 15491.0], [2.0, 30181.0], [8.0, 36618.5], [35.0, 32886.0], [36.0, 16114.0], [10.0, 38266.5], [45.0, 28063.0], [12.0, 18059.5], [13.0, 27805.5], [55.0, 24068.0], [1.0, 24722.0], [16.0, 42820.0], [17.0, 34999.0], [5.0, 29059.5], [81.0, 28325.0], [87.0, 30384.0], [91.0, 29303.0], [94.0, 5677.5], [24.0, 7349.0], [101.0, 16326.0], [26.0, 15411.0], [7.0, 23841.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 131.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.70229876E12, "maxY": 16.666666666666668, "series": [{"data": [[1.70229876E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70229876E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5166666666666667, "minX": 1.70229876E12, "maxY": 16.15, "series": [{"data": [[1.70229876E12, 16.15], [1.70229882E12, 0.5166666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70229882E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5166666666666667, "minX": 1.70229876E12, "maxY": 16.15, "series": [{"data": [[1.70229876E12, 16.15], [1.70229882E12, 0.5166666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70229882E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5166666666666667, "minX": 1.70229876E12, "maxY": 16.15, "series": [{"data": [[1.70229876E12, 16.15], [1.70229882E12, 0.5166666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70229882E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

